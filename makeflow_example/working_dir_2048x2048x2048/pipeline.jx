
{
    "define" : {
        "Z_MAX"         : 45,
        "Y_MAX"         : 6,
        "X_MAX"         : 6,
        "ID_MAX"        : 410,
        "META_FP"       : "/n/pfister_lab2/Lab/tfranzmeyer/Data2/blockbased_synapseaware/makeflow_example/meta/Zebrafinch.meta",
        "OUTPUT_DIR"    : "/n/pfister_lab2/Lab/tfranzmeyer/Data2/Zebra/checkfiles_1024x1024x128/",
        "MF_DIR"        : "/n/pfister_lab2/Lab/tfranzmeyer/Data2/blockbased_synapseaware/makeflow_example/",

        "EX_DIR_HF"     : MF_DIR+"execution_scripts/Holefilling/",
        "EX_DIR_SK"     : MF_DIR+"execution_scripts/Skeletonize/",
        "EX_DIR_SF"     : MF_DIR+"execution_scripts/Surfaces/",

        "Z_RANGE"       : range(0,Z_MAX),
        "Y_RANGE"       : range(0,Y_MAX),
        "X_RANGE"       : range(0,X_MAX),
        "ID_RANGE"      : range(0,ID_MAX),

        "cmnd_tpl_HF"   : "python "+EX_DIR_HF+"step-%d-HF.py "+META_FP+" %d %d %d",
        "outp_tpl_HF"   : OUTPUT_DIR+"mf-HF-S%d-out-%dz-%dy-%dx.txt",
        "cmnd_tpl_SK"   : "python "+EX_DIR_SK+"step-%d-SK.py "+META_FP+" %d %d %d",
        "outp_tpl_SK"   : OUTPUT_DIR+"mf-SK-S%d-out-%dz-%dy-%dx.txt",

        "cmnd_step_3_HF": "python "+ EX_DIR_HF +"step-3-HF.py "+META_FP,
        "outp_step_3_HF": OUTPUT_DIR+"mf-HF-S3-out-allz-ally-allx.txt",

        "cmnd_step_4_SK": "python "+ EX_DIR_SK +"step-4-SK.py "+META_FP+" %d",
        "outp_step_4_SK": OUTPUT_DIR+"mf-SK-S4-out-label%d.txt",

    },

    "rules" : [
                ## Holefilling
                # STEP 1
                {
                    "command" : format(cmnd_tpl_HF,1,IZ,IY,IX),
                    "inputs"  : [],
                    "outputs" : [format(outp_tpl_HF,1,IZ,IY,IX)],
                } for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE,

                # STEP 2
                {
                    "command" : format(cmnd_tpl_HF,2,IZ,IY,IX),
                    "inputs"  : [format(outp_tpl_HF,1,IZ_,IY_,IX_) for IZ_ in [IZ-1,IZ,IZ+1] for IY_ in [IY-1,IY,IY+1] for IX_ in [IX-1,IX,IX+1]
                                 if (IZ_>=0 and IZ_<Z_MAX and IY_>=0 and IY_<Y_MAX and IX_>=0 and IX_<X_MAX)],
                    "outputs" : [format(outp_tpl_HF,2,IZ,IY,IX)],
                } for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE,

                # STEP 3
                {
                    "command" : cmnd_step_3_HF,
                    "inputs"  : [format(outp_tpl_HF,2,IZ,IY,IX) for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE],
                    "outputs" : [outp_step_3_HF],
                },

                # STEP 4
                {
                    "command" : format(cmnd_tpl_HF,4,IZ,IY,IX),
                    "inputs"  : [outp_step_3_HF],
                    "outputs" : [format(outp_tpl_HF,4,IZ,IY,IX)],
                } for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE,

                ## Thinning
                # STEP 1
                {
                    "command" : format(cmnd_tpl_SK,1,IZ,IY,IX),
                    "inputs"  : [format(outp_tpl_HF,4,IZ,IY,IX)],
                    "outputs" : [format(outp_tpl_SK,1,IZ,IY,IX)],
                } for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE,

                # STEP 2
                {
                    "command" : format(cmnd_tpl_SK,2,IZ,IY,IX),
                    "inputs"  : [format(outp_tpl_SK,1,IZ_,IY_,IX_) for IZ_ in [IZ-1,IZ,IZ+1] for IY_ in [IY-1,IY,IY+1] for IX_ in [IX-1,IX,IX+1]
                                 if (IZ_>=0 and IZ_<Z_MAX and IY_>=0 and IY_<Y_MAX and IX_>=0 and IX_<X_MAX)],
                    "outputs" : [format(outp_tpl_SK,2,IZ,IY,IX)],
                } for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE,

                # STEP 3
                {
                    "command" : format(cmnd_tpl_SK,3,IZ,IY,IX),
                    "inputs"  : [format(outp_tpl_SK,2,IZ_,IY_,IX_) for IZ_ in [IZ-1,IZ,IZ+1] for IY_ in [IY-1,IY,IY+1] for IX_ in [IX-1,IX,IX+1]
                                 if (IZ_>=0 and IZ_<Z_MAX and IY_>=0 and IY_<Y_MAX and IX_>=0 and IX_<X_MAX)],
                    "outputs" : [format(outp_tpl_SK,3,IZ,IY,IX)],
                } for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE,

                # STEP 4
                {
                    "command" : format(cmnd_step_4_SK, ID),
                     "inputs"  : [format(outp_tpl_SK,3,IZ,IY,IX) for IZ in Z_RANGE for IY in Y_RANGE for IX in X_RANGE],
                    "outputs" : [format(outp_step_4_SK, ID)],
                } for ID in ID_RANGE,

              ]
}
